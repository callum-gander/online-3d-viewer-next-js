import Head from "next/head";
import Basic3DViewer from "../components/Basic3DViewer";
import ViewerWithUrls from "../components/ViewerWithUrls";
import ViewerWithUI from "../components/ViewerWithUI";
import { useEffect, useRef, useState } from "react";

export default function Home() {
    const fileInputRef = useRef(null);
    const fileInput2Ref = useRef(null);
    const [file, setFile] = useState(null);
    const [url, setUrl] = useState("http://localhost:3000/bunny.stl");
    const [loadModel, setLoadModel] = useState(false);
    const [file2, setFile2] = useState(null);

    const fileSelected = (e) => {
        e.preventDefault();
        if (fileInputRef.current.files.length) {
            setFile(fileInputRef.current.files[0]);
        }
    };

    const fileSelected2 = (e) => {
        e.preventDefault();
        if (fileInput2Ref.current.files.length) {
            setFile2(fileInput2Ref.current.files[0]);
        }
    };

    return (
        <div>
            <Head>
                <title>Online 3D Viewer with Next.js</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="bg-white min-h-screen w-screen px-12 lg:px-48 py-12 gap-6 flex flex-col">
                <h1 className="text-4xl mb-4 text-center">
                    Online 3D Viewer with Next.js
                </h1>
                <div className="flex flex-col gap-2">
                    <h2 className="text-2xl">
                        This is a work in progress! If you want to add or
                        correct these examples, please submit a pull request!
                    </h2>
                    <p>
                        There was a lack of documentation for Online 3D Viewer
                        and how to use it with React and Next.js, so I've made
                        this guide to help others encountering the same issue.
                        I'll show some examples of how you can use the Online 3D
                        Viewer and while also explaining some errors and issues
                        I encountered and how to resolve them. This is very much
                        a work in progress and isn't perfect, if you have any
                        feedback or additional advice, please submit a pull
                        request
                    </p>
                    <p>
                        To setup this project, clone the repo, npm install the
                        packages and run the server with npm run dev. I've only
                        tested this with stl and 3dm files, other files may
                        produce unique issues, if you encounter them, please let
                        me know
                    </p>
                </div>
                <div>
                    <h2 className="text-2xl">
                        Setting up Online 3D Viewer with your Next app:
                    </h2>
                    <p>
                        First, install the npm package from
                        https://www.npmjs.com/package/online-3d-viewer. Import
                        the package into your project with `import * as OV from
                        "online-3d-viewer"`
                    </p>
                    <p>
                        Secondly, on order for this package to work in your
                        project, make sure you have the libs folder in your
                        public folder, as shown in this repo. These are the
                        external packages used by Online-3D-Viewer to load the
                        different types of 3D file client side.{" "}
                        <strong>
                            THE PACKAGE WILL NOT WORK WITHOUT THESE PRESENT.
                        </strong>
                    </p>
                    <p>
                        This is all the setup you'll need and we'll now look at
                        the different ways you can use the viewer and load in
                        files
                    </p>
                </div>
                <div>
                    <h2 className="text-2xl">Example 1: A basic 3D viewer</h2>
                    <p>
                        This is a very basic example of how you can have a file
                        input, upload a file and have it display in the 3D
                        viewer. This example will also clean up correctly,
                        avoiding memory leaks that can happen while using this
                        package with React . Using this example's component, you
                        can easily spin up multiple different viewers at the
                        same time and passing different files into each one,
                        though I would be careful doing so for reasons mentioned
                        at the bottom of this page.
                    </p>
                    <p>
                        See the "Basic3DViewer" component in the components
                        folder to see how this was constructed. I've left
                        annotated notes explaining how everything works but will
                        add some additional comments here
                    </p>
                    <p>
                        {" "}
                        You may notice that the method of loading files seems
                        over complicated. As the viewer loads files in using a
                        FileList, you don't need to extract the file, put it in
                        state, then use a DataTransfer object to recreate a
                        FileList. However, this method works better if you're
                        holding File Interfaces in state, e.g. with Zustand, and
                        passing them between components, as this way the
                        original file input DOM element doesn't need to be on
                        the page. This is useful using UI patterns like Wizards,
                        where a user may upload a file on one step and then the
                        app may need the file again on another step despite the
                        fact that DOM input is gone
                    </p>
                </div>
                <div className="flex flex-col justify-center items-center gap-8">
                    <input
                        ref={fileInputRef}
                        onChange={fileSelected}
                        type="file"
                        className=" h-12 w-36 border-2 border-black p-2 appearance-none rounded-sm"
                    />
                    <Basic3DViewer file={file} />
                </div>
                <div>
                    <h2 className="text-2xl">
                        Example 2: Different methods to load files
                    </h2>
                    <p>
                        There are two methods that I've used to load files into
                        the viewer: LoadModelFromFileList and
                        LoadModelFromInputFiles. If you need to load a file
                        uploaded through a DOM input by the user, use
                        LoadModelFromFileList and use the prior example. If you
                        want to load the file from a URL, use the example below.
                    </p>
                    <p>
                        As with the prior example, please see the
                        "ViewerWithUrls" component and see the annotated code.
                    </p>
                </div>
                <div className="flex flex-col items-center justify-center gap-8">
                    <div className="flex flex-row gap-4">
                        <div className="flex flex-col">
                            <label>Enter URL here:</label>
                            <input
                                type="text"
                                value={url}
                                onChange={(e) => setUrl(e.target.value)}
                                className=" border-2 border-black  rounded-sm"
                            />
                        </div>
                        {!loadModel && (
                            <button onClick={() => setLoadModel(true)}>
                                Load Model from URL
                            </button>
                        )}
                        {loadModel && (
                            <button onClick={() => setLoadModel(false)}>
                                Remove Model
                            </button>
                        )}
                    </div>
                    <ViewerWithUrls url={url} loadModel={loadModel} />
                </div>
                <div>
                    <h2 className="text-2xl">
                        Example 3: Using viewer methods with your own UI
                    </h2>
                    <p>
                        Obviously, most users will likely want to use this
                        package for more than just viewing 3D files.
                        Unfortunately, there isn't any real documentation on how
                        to do so and what can be done. I'll show some examples
                        here but until there is more documentation, I'd advise
                        you to read the code, particularly
                        https://github.com/kovacsv/Online3DViewer/blob/master/source/engine/viewer/viewer.js
                        and
                        https://github.com/kovacsv/Online3DViewer/blob/master/source/engine/viewer/embeddedviewer.js
                        to see what's possible
                    </p>
                    <p>
                        I haven't commented the code for this component, it's
                        fairly self explanatory. To better understand why
                        certain parameters are being passed into each function,
                        see the source code linked above
                    </p>
                </div>
                <div className="flex flex-col justify-center items-center gap-8">
                    <input
                        ref={fileInput2Ref}
                        onChange={fileSelected2}
                        type="file"
                        className=" h-12 w-36 border-2 border-black p-2 appearance-none rounded-sm"
                    />
                    <ViewerWithUI file={file2} />
                </div>

                <div>
                    <h2 className="text-2xl">Tips and things to avoid</h2>
                    <ul className="list-disc">
                        <li>
                            You must wait for the component to mount with
                            useEffect before instantiating the viewer as the
                            viewer calls window on initialisation which is only
                            present in the browser, not node
                        </li>
                        <li>
                            The package isn't well documented so there are two
                            ways to figure out what functions can be used: read
                            the source code or log the Viewer object and examine
                            in the browser
                        </li>
                        <li>
                            Instantiating the viewer object creates a canvas DOM
                            element that we need to hold onto with React's
                            useRef
                        </li>
                        <li>
                            Another important thing is that you need to
                            correctly clean up the instantiated EmbeddedViewer.
                            You can't do this by just using something like
                            `viewerRef = null` in the useEffect cleanup function
                            as the DOM element will be cleaned up but not all
                            the references to the model and the arrays that hold
                            the geometry data. As such, we need to explicitly
                            remove these. The code I have at the moment was
                            haphazardly slapped together and likely contains
                            redundancy, if you come up with a better solution,
                            please let me know but it does correctly reduce the
                            memory usage
                        </li>
                        <li>
                            Even with the above code, the JS garbage collector
                            is not the fastest so if you're running multiple
                            instances of the viewer, be careful to stagger them
                            if possible, as your user's browsers may run out of
                            memory, particularly on lower end devices
                        </li>
                        <li>
                            Even if you somehow don't manage to run out of
                            memory, you will likely run out of WebGL contexts
                            (see
                            https://github.com/kovacsv/Online3DViewer/issues/320)
                            which is capped at anywhere between 8-12 depending
                            on the device and the browser
                        </li>
                        <li>
                            If you need to pass a file around between components
                            where the initial input may be lost, consider
                            storing the file in state using something like
                            Zustand
                        </li>
                    </ul>
                </div>
            </main>
        </div>
    );
}
